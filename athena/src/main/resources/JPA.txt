16. 如何正确建立 @OneToMany 双向关系

实现 `@OneToMany` 双向关系有几个陷阱，相信你也希望一开始就能实现正确。


"描述："下面的示例应用展示了如何正确实现 `@OneToMany` 双向关联。


技术要点


    "总是"建立父子级联

    对父亲标记 `mappedBy`

    对父亲使用 `orphanRemoval`，移除没有引用的子对象

    在父节点上使用 helper 方法实现关联同步

    "总是"使用延迟加载

    使用业务主键或实体标识符，参考[这篇介绍][23]覆写 `equals()` 和 `hashCode()` 方法。


[示例代码][24]


[23]:https://vladmihalcea.com/the-best-way-to-implement-equals-hashcode-and-tostring-with-jpa-and-hibernate/

[24]:https://github.com/AnghelLeonard/Hibernate-SpringBoot/tree/master/HibernateSpringBootOneToManyBidirectional


23. 如何使用 JPA 回调


为实体绑定事件处理时，记得使用 JPA 内建回调，不要重新发明轮子。


"描述："下面的示例展示了如何启用 JPA 回调（`Pre/PostPersist`、`Pre/PostUpdate`、`Pre/PostRemove` 和 `PostLoad`）。


技术要点


    在实体中编写回调方法并挑选合适的注解

    Bean Class 中带注解的回调方法返回类型必须为 `void` 且不带参数
    

@Entity
@Table(name="t_classroom")
public class ClassRoom {

    private int id;
    private String className;
    
    @OneToMany(cascade = CascadeType.ALL, mappedBy="room", fetch = FetchType.EAGER)　　
    // OneToMany指定了一对多的关系，mappedBy="room"指定了由多的那一方来维护关联关系，mappedBy指的是多的一方对一的这一方的依赖的属性，
	// (注意：如果没有指定由谁来维护关联关系，则系统会给我们创建一张中间表)
    @LazyCollection(LazyCollectionOption.EXTRA)　　
    // LazyCollection属性设置成EXTRA指定了当如果查询数据的个数时候，只会发出一条 count(*)的语句，提高性能
    @JsonIgnoreProperties("room")
	// @OrderBy("name ASC")
    private Set<Student> students;
    
    // List is org.hibernate.collection.internal.PersistentBag
    // Set is org.hibernate.collection.internal.PersistentSet
    // SortedSet is org.hibernate.collection.internal.PersistentSortedSet
   
}


@Entity
@Table(name="t_student")
public class Student {

    private int id;
    private String name;
    private int age;
    
    @ManyToOne(fetch=FetchType.EAGER)　　
	// ManyToOne指定了多对一的关系，fetch=FetchType.LAZY属性表示在多的那一方通过延迟加载的方式加载对象(默认不是延迟加载)
    @JoinColumn(name="rid")　　
	// 通过 JoinColumn 的name属性指定了外键的名称 rid　(注意：如果我们不通过JoinColum来指定外键的名称，系统会给我们声明一个名称)
	@JsonIgnoreProperties("students")
	// JsonIgnoreProperties prevent java.lang.StackOverflowError
    private ClassRoom room;
    
}

@Entity
@Table(name="t_teacher")
public class Teacher implements PersistentAttributeInterceptable {

	@Id
	private String id;
	
	@Lob
	@Basic(fetch = FetchType.LAZY)
	@JsonIgnore
	private byte[] content;
	
	public byte[] getContent() {
		if (interceptor != null) {
			return (byte[]) interceptor.readObject(this, "content", content);
		}
		return null;
	}

	public void setContent(byte[] content) {
		this.content = content;
	}
	
	@Transient
	@JsonIgnore
	private PersistentAttributeInterceptor interceptor;
	
	@Override
	public PersistentAttributeInterceptor $$_hibernate_getInterceptor() {
		return this.interceptor;
	}

	@Override
	public void $$_hibernate_setInterceptor(PersistentAttributeInterceptor interceptor) {
		this.interceptor = interceptor;
	}

}

spring:
  jpa:
    open-in-view: true
    database-platform: org.hibernate.dialect.Oracle10gDialect
    properties:
      hibernate:
        enable_lazy_load_no_trans: true
        show_sql: true
        use_sql_comments: true
        format_sql: true

logging:
  file: log/${spring.application.name}.log
  max-size: 1MB
  max-history: 100
  level:
    com.chimelong.cldmp: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.engine.QueryParameters: DEBUG
    org.hibernate.engine.query.HQLQueryPlan: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.hibernate.type.descriptor.sql.BasicExtractor: TRACE
